fmod SEQUENCE{X :: TRIV} is

	sorts NeList{X} List{X} .
	subsort X$Elt < NeList{X} < List{X} .
	pr QID .

	op [] : -> List{X} [ctor] .
	op __ : List{X} List{X} -> List{X} [ctor assoc] .

	op name : X$Elt -> Qid .

	var E : X$Elt .
	var L : List{X} .
	var Q : Qid .

	eq [] L = L .
	eq L [] = L .

	op head : List{X} -> X$Elt .
	eq head([]) = [] .
	eq head(E L) = E .
	eq head(E) = E .

	op tail : List{X} -> List{X} .
	eq tail([]) = [] .
	eq tail(E L) = L .
	eq tail(E) = [] .

	op containsName : List{X} Qid -> Bool .	
	eq containsName([], Q) = false .
	eq containsName(L, Q) = name(head(L)) == Q or containsName(tail(L), Q) .

	op removeByName : List{X} Qid -> List{X} .
	eq removeByName([], Q) = [] .
	ceq removeByName(L, Q) = tail(L) if name(head(L)) == Q .
	eq removeByName(L, Q) = head(L) removeByName(tail(L), Q) [owise] .

	op getByName : List{X} Qid -> X$Elt .
	eq getByName([], Q) = [] .
	ceq getByName(L, Q) = head(L) if name(head(L)) == Q .
	eq getByName(L, Q) = getByName(tail(L), Q) [owise] .

endfm

fmod APP-TYPES is
	
	sort PrimitiveType .
	ops APPINT APPCHAR APPBOOL APPSTRING : -> PrimitiveType [ctor] .

endfm

view PrimTypeView from TRIV to APP-TYPES is
	sort Elt to PrimitiveType .
endv

fmod BASE is

	pr APP-TYPES .
	pr NAT .
	pr QID .
	pr BOOL .
	pr STRING .
	
	sort Object .
	
	op null : -> Object [ctor] .

	op _{_ : Object Object -> Object [ctor prec 33 gather (e E)] .
	
	sort AssociationProperty . subsort AssociationProperty < Object .
	sort EmbaddedClass . subsort EmbaddedClass < Object .
	sort EmbaddedProperty . subsort EmbaddedProperty < Object .
	sort GeneralClass . subsort GeneralClass < Object .
	sort ModelEntity . subsort ModelEntity < Object .
	sort MultipliableProperty . subsort MultipliableProperty < Object .
	sort PrimitiveClass . subsort PrimitiveClass < Object .
	sort PrimitiveProperty . subsort PrimitiveProperty < Object .
	sort Property . subsort Property < Object .
	sort StandardClass . subsort StandardClass < Object .
	
	
	sort PrimitiveType .
	op APPINT APPBOOL : -> PrimitiveType [ctor] .
	
	
	vars S1 S2 S3 S4 : String .
	vars PT1 : PrimitiveType .
	vars B1 B2 : Bool .
	vars N1 N2 : Nat .
	
	
	op modelEntity : String -> ModelEntity [ctor] .
	op newModelEntity : String -> ModelEntity .
	eq newModelEntity(S1) = modelEntity(S1){null .
	
	op primitiveClass : PrimitiveType -> PrimitiveClass [ctor] .
	op newPrimitiveClass : String PrimitiveType -> PrimitiveClass .
	eq newPrimitiveClass(S1, PT1) = modelEntity(S1){primitiveClass(PT1){null .
	
	op property : String -> Property [ctor] .
	op newProperty : String -> Property .
	eq newProperty(S1) -> property(S1){null .
	
	op multipliableProperty : Bool Bool Nat Nat -> MultipliableProperty [ctor] .
	op newMultipliableProperty : String String Bool Bool Nat Nat -> MultipliableProperty .
	eq newMultipliableProperty(S1, S2, B1, B2, N1, N2) = property(S1){multipliableProperty(S2, B1, B2, N1, N2){null .
	
	op primitiveProperty : String -> PrimitiveProperty [ctor] .
	op newPrimitiveProperty : String String String Bool Bool Nat Nat -> PrimitiveProperty .
	--- S1=propName,S4=ownClsName,S3=defVal,S2=PrimClsName(type att)
	eq newPrimitiveProperty(S1, S2, S3, S4, B1, B2, N1, N2) = property(S1){multipliableProperty(S2, B1, B2, N1, N2){primitiveProperty(S2)
	
	
	
endfm

view Strings from TRIV to BASE is
	sort Elt to PrimitiveType .
endv	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		