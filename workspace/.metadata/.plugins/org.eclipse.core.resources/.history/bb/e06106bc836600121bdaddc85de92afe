fmod BASE is

	pr NAT .
	pr QID .
	pr BOOL .
	pr STRING .
	
	sort Object .
	
	op null : -> Object [ctor] .

	op _}_ : Object Object -> Object [ctor prec 33 gather (E e)] . 
	
	sorts Car Porsche Trabant .
	
	subsort Car < Object .
	subsort Porsche < Object .
	subsort Trabant < Object .
	
	var B : Bool .
	var S : String .
	var N : Nat .
	var O O1 O2 : Object .
	var C : Car .
	var P : Porsche .
	var T : Trabant .
	
	ceq O1 = O1}null if O1 =/= null .
	
	op car : String -> Car [ctor] .
	op newCar : String -> Car .
	eq newCar(S) = car(S) .
	
	op porsche : Nat -> Porsche [ctor] .
	op newPorsche : String Nat -> Porsche .
	eq newPorsche(S, N) = porsche(N)}car(S) .
	
	op trabant : Bool -> Trabant [ctor] .
	op newTrabant : String Nat Bool -> Trabant .
	eq newTrabant(S, N, B) = trabant(B)}porsche(N)}car(S) .
	
	op getName : Car -> String .
	eq getName(O}car(S)) = S .
	
	op getSpeed : Porsche -> Nat .
	eq getSpeed(O}porsche(N)}C) = N .
	
	op isBroken : Trabant -> Bool .
	eq isBroken(O}trabant(B)}P}C) = B .
	
endfm

rew getSpeed(null}trabant(true)}porche(5)}car("c2")) .
rew newCar("car") .
rew newPorsche("porsche", 100) .
rew newTrabant("trabant", 100, true) .
rew getName(newCar("car")) .
rew getName(newPorsche("porsche", 100)) .
rew getName(newTrabant("trabant", 100, true)) .
rew getSpeed(newPorsche("porsche", 100)) .
rew getSpeed(newTrabant("trabant", 100, true)) .
rew isBroken(newTrabant("trabant", 100, true)) .